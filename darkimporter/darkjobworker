#!/usr/bin/env python
import os
import sys
import time
import koji
import stat
import json
import redis
import logging
import requests
import tempfile
import subprocess
import ConfigParser
from darkdaemon import Daemon
from BeautifulSoup import BeautifulSoup

logger = None
DISTRO = None #List for distro guessing, comes from Redis


def getconfig():
    """
    Get the server configuration as a dict
    """
    config = ConfigParser.ConfigParser()
    config.read('/etc/darkjobworker.conf')
    result = {}
    try:
        result['DB'] = config.get('darkserver','database')
        result['USER'] = config.get('darkserver','user')
        result['PASSWORD'] = config.get('darkserver','password')
        result['HOST'] = config.get('darkserver','host')
        result['PORT'] = config.get('darkserver','PORT')
    except:
        logging.getLogger('koji.plugin.darkserver').error('Problem parsing config')
    return result


def is_elf(filepath):
    """
    Finds if a file is elf or not
    """
    cmd = "file -k %s" % filepath
    data = system(cmd)
    data = data.split(": ")
    if len(data) > 1:
        if data[1].startswith('ELF'):
            return True
    return False

def find_elf_files(files):
    """
    Returns the ELF files from the list
    """
    elfs = []
    for filename in files:
        if os.path.exists(filename):
            if is_elf(filename):
                elfs.append(filename)
    return elfs

def removedir(path):
    """
    removes the dir which must be under /tmp and not a symlink
    """
    if os.path.islink(path):
        return
    if not path.startswith('/tmp'):
        return
    os.system('rm -rf %s' % path)

def system(cmd):
    """
    Invoke a shell command. Primary replacement for os.system calls.
    """
    ret = subprocess.Popen(cmd, shell=True, stdin=subprocess.PIPE,
                stdout=subprocess.PIPE, stderr=subprocess.PIPE, close_fds=True)
    out, err = ret.communicate()
    return out

def parserpm(destdir, path, distro="fedora"):
    """
    parse the rpm and insert data into database
    """
    path = path.strip()
    filename = os.path.basename(path)

    #Extract the rpm
    cmd = 'rpmdev-extract -C %s %s' % (destdir, path)
    print cmd
    datum = system(cmd)
    data = datum.split('\n')
    #Find out all elf files from the list
    files = [os.path.join(destdir, row) for row in data]
    elffiles = find_elf_files(files)

    #Return if ELF file found in the RPM
    if not elffiles:
        return
    
    #Find the lenth of the destdir name
    dest_len = len(destdir)

    result = []
    #run eu-unstrip and parse the result
    for eachfile in elffiles:
        data = system("eu-unstrip -n -e %s" % eachfile)
        try:
            name = eachfile[dest_len+1:]
            dirname = "/" + '/'.join(os.path.dirname(name).split('/')[1:])
            sql = "INSERT INTO buildid_gnubuildid VALUES"\
                              " (null, '%s','%s','%s','%s','%s')"
            sql = sql % (os.path.basename(name), dirname, \
                         data.split(' ')[1].split('@')[0], \
                         filename[:-4], distro)

            result.append(sql)
        except Exception, error:
            logger.error(error)

    #config = getconfig()
    try:

        conn = MySQLdb.connect(config['HOST'], config['USER'], config['PASSWORD'], config['DB'])
        cursor = conn.cursor()

        for sql in result:
            cursor.execute(sql)
            #logger.info(sql)
        conn.commit()
        conn.close()

        logger.info(filename)
    except Exception, e:
        logger.error(str(e))


def get_distro(url):
    """
    Guess the distro name from rpm releases
    """
    global DISTRO
    idx = int(url.split('=')[-1])
    kojiurl="http://koji.fedoraproject.org/kojihub"
    kc = koji.ClientSession(kojiurl, {'debug': False, 'password': None,\
                        'debug_xmlrpc': False, 'user': None})    
    res = kc.getBuild(idx)
    for name in DISTRO:
        if res['release'].find(name) != -1:
            return name
        
    return None

def downloadrpm(url, path):
    system("wget %s -O %s" % (url, path))
    
def do_buildid_import(mainurl):
    """
    Import the buildids from the given Koji URL
    """
    if not mainurl:
        return
    #Guess the distro name
    distro = get_distro(mainurl)
    if not distro: #We don't want to import this build
        return
    req = requests.get(mainurl)
    soup = BeautifulSoup(req.content)
    for link in soup.findAll('a'):
        name = link.get('href')
        if name.endswith('.rpm') and not name.endswith('.src.rpm'):
            rpm = name.split('/')[-1]
            #Create the temp dir
            destdir = tempfile.mkdtemp(suffix='.' + str(os.getpid()), dir=None)
            destdir1 = tempfile.mkdtemp(suffix='.' + str(os.getpid()), dir=None)
            rpm = os.path.join(destdir1, rpm)
            downloadrpm(name, rpm)
            try:
                parserpm(destdir, rpm, distro)
            except Exception, error:
                logger.error(str(error))
            #Remove the temp dir
            removedir(destdir)   
            removedir(destdir1)  
            

class DarkDaemon(Daemon):
    def run(self):
        """
        The daemon process
        """
        global DISTRO
        kojiurl="http://koji.fedoraproject.org/kojihub"
        kc = koji.ClientSession(kojiurl, {'debug': False, 'password': None,\
                            'debug_xmlrpc': False, 'user': None})
        rdb = redis.Redis(host='localhost', port=6379, db=1)
        while True:
            DISTRO = json.loads(rdb.get('guessdistro'))
            
            #mainurl = 'http://koji.fedoraproject.org/koji/buildinfo?buildID=%s' % idx
            #req = requests.get(mainurl)
            if rdb.llen("jobqueue") == 0:
                self.logger.info("Sleeping, no jobqueue job")
                time.sleep(5)
                continue
            url = rdb.rpop("jobqueue")
            idx = int(url.split('=')[-1])
            try:
                self.logger.info("Import started %s" % idx)
                do_buildid_import(url)
                self.logger.info("Import finished %s" % idx)
                
            except Exception as err:
                self.logger.error(err)
                

    

if __name__ == '__main__':
    logging.basicConfig(filename='darkjobqueue.log', level=logging.INFO,\
                        format='%(asctime)s:%(name)s:%(levelname)s:%(message)s')
    daemon = None 

    if len(sys.argv) == 2:
        logger = logging.getLogger("jobworker")
        daemon = DarkDaemon('/tmp/darkjobqueue.pid', logger)
        if 'start' == sys.argv[1]:
            daemon.start()
        elif 'stop' == sys.argv[1]:
            daemon.stop()
        elif 'restart' == sys.argv[1]:
            daemon.restart()
        else:
            print "Unknown command"
            sys.exit(2)
        sys.exit(0)
    if len(sys.argv) == 3:
        logger = logging.getLogger("jobworker%s" % sys.argv[2])
        daemon = DarkDaemon('/tmp/darkjobqueue%s.pid' % sys.argv[2], logger)
        if 'start' == sys.argv[1]:
            daemon.start()
        elif 'stop' == sys.argv[1]:
            daemon.stop() 
        sys.exit(0)
    else:
        print "usage: %s start|stop|restart" % sys.argv[0]
        sys.exit(2)
